{"version":3,"sources":["../../src/baseEvmAdapter.ts","../../src/metamaskAdapter.ts"],"names":["authenticateUser","WalletLoginError","chainId","ADAPTER_STATUS","method","accounts","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","payload","domain","window","uri","address","parseInt","version","nonce","Math","issuedAt","signChallenge","challenge","params","signedMessage","verifySignedChallenge","saveToken","disconnect","clearToken","constructor","adapterOptions","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","NOT_READY","provider","init","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","ADAPTER_EVENTS","log","options","setAdapterSettings","connect","getChainConfig","adapter","this","status","reconnected","rehydrated","cleanup","getUserInfo","switchChain","chainConfig","switchError","chainName","rpcUrls"],"mappings":"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","file":"static/js/15.1d9c7c32.chunk.js","sourcesContent":["import { BaseAdapter, WalletLoginError, ADAPTER_STATUS, getSavedToken, checkIfTokenIsExpired, signChallenge, verifySignedChallenge, saveToken, clearToken } from '@web3auth/base';\n\nclass BaseEvmAdapter extends BaseAdapter {\n  async authenticateUser() {\n    var _this$chainConfig;\n\n    if (!this.provider || !((_this$chainConfig = this.chainConfig) !== null && _this$chainConfig !== void 0 && _this$chainConfig.chainId)) throw WalletLoginError.notConnectedError();\n    const {\n      chainNamespace,\n      chainId\n    } = this.chainConfig;\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0], this.name);\n\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n\n        if (!isExpired) {\n          return {\n            idToken: existingToken\n          };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString()\n      };\n      const challenge = await signChallenge(payload, chainNamespace);\n      const signedMessage = await this.provider.request({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]]\n      });\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage, challenge, this.name, this.sessionTime);\n      saveToken(accounts[0], this.name, idToken);\n      return {\n        idToken\n      };\n    }\n\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n}\n\nexport { BaseEvmAdapter };\n//# sourceMappingURL=baseEvmAdapter.esm.js.map\n","import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\nimport { BaseEvmAdapter } from '@web3auth/base-evm-adapter';\n\nclass MetamaskAdapter extends BaseEvmAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n    this.sessionTime = adapterOptions.sessionTime || 86400;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n\n    if (options !== null && options !== void 0 && options.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    await super.disconnect();\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"sourceRoot":""}